// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É elliptic –¥–ª—è ECDSA
const EC = require("elliptic").ec;
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π secp256k1
const ec = new EC("secp256k1");
// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ sha256
const sha256 = require("crypto-js/sha256");
// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const DatabaseManager = require("./db");
const fs = require('node:fs');
const path = require('node:path');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m",
  red: "\x1b[31m"
};

// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –±–ª–æ–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
class Block {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    constructor(previousHash, transactions) {
    this.timestamp = new Date().toISOString();
    this.previousHash = previousHash;
    this.transactions = transactions;
    this.hash = this.calculateHash();
    this.nonce = 1;
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –±–ª–æ–∫–∞
  calculateHash() {
    return sha256(
      this.timestamp +
        this.previousHash +
        JSON.stringify(this.transactions) +
        this.nonce
    ).toString();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (difficulty)
  getAnswer(difficulty) {
    let answer = "";
    for (let i = 0; i < difficulty; i++) {
      answer += "0";
    }
    return answer;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫–µ
  validateBlockTransactions() {
    for (const transaction of this.transactions) {
      if (!transaction.isValid()) {
        console.log(
          `${colors.red}Invalid transaction found in this block. The block is invalid.${colors.reset}`
        );
        return false;
      }
    }
    return true;
  }

  // –ü—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  mine(difficulty) {
    this.validateBlockTransactions();
    const spinnerChars = ["üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò"];
    let spinnerIndex = 0;

    while (true) {
      this.hash = this.calculateHash();
      process.stdout.write(
        `\rMining ${spinnerChars[spinnerIndex]} nonce: ${
          this.nonce
        }, partial hash: ${this.hash.substring(0, 16)}...`
      );
      spinnerIndex = (spinnerIndex + 1) % spinnerChars.length;
      if (this.hash.substring(0, difficulty) !== this.getAnswer(difficulty)) {
        this.nonce++;
      } else {
        break;
      }
    }
    console.log(
      `\n${colors.green}Block mined successfully!: ${this.hash}${colors.reset}`
    );
  }
}

// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –±–ª–æ–∫—á–µ–π–Ω
class Chain {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É, —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –ø—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –Ω–∞–≥—Ä–∞–¥—É
  constructor() {
    this.chain = [this.createGenesisBlock()];
    this.difficulty = 4;
    this.transactionPool = [];
    this.minerReward = 3.125;
  }

  //  –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ–∑–∏—Å-–±–ª–æ–∫ (–ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —Ü–µ–ø–æ—á–∫–∏)
  createGenesisBlock() {
    return new Block("0", []);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
  getLatestBlock() {
    return this.chain[this.chain.length - 1];
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ø—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  addTransaction(transaction) {
    this.transactionPool.push(transaction);
  }

  // –°–æ–∑–¥–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫ –≤ —Ü–µ–ø–æ—á–∫—É
  addBlock(newBlock) {
    const timer = new MiningTimer();
    newBlock.previousHash = this.getLatestBlock().hash;

    timer.start();
    newBlock.mine(this.difficulty);
    timer.stop(this.chain.length + 1, newBlock.hash);

    this.chain.push(newBlock);
  }

  // –ú–∞–π–Ω–∏—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø—É–ª–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫
  mineTransactionPool(minerAddress) {
    const timer = new MiningTimer();
    const rewardTransaction = new Transaction("", minerAddress, this.minerReward);
    this.transactionPool.push(rewardTransaction);

    timer.start();
    const newBlock = new Block(
      this.getLatestBlock().hash,
      this.transactionPool
    );
    newBlock.mine(this.difficulty);
    timer.stop(this.chain.length + 1, newBlock.hash);

    this.chain.push(newBlock);
    this.transactionPool = [];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏
  verification() {
    for (let i = 1; i < this.chain.length; i++) {
      const blockToValidate = this.chain[i];
      if (!blockToValidate.validateBlockTransactions()) {
        console.log(
          `${colors.red}An invalid block was found in the chain.${colors.reset}`
        );
        return false;
      }

      const currentBlock = this.chain[i];
      const previousBlock = this.chain[i - 1];

      if (currentBlock.hash !== currentBlock.calculateHash()) {
        console.log("\n");
        console.log(
          `${colors.red}At ${new Date().toISOString()}, the blockchain is invalid due to tampered data.${colors.reset}`
        );
        console.log("\n");
        return false;
      }

      if (currentBlock.previousHash !== previousBlock.hash) {
        console.log("\n");
        console.log(
          `${colors.red}At ${new Date().toISOString()}, the blockchain is invalid because the chain is broken.${colors.reset}`
        );
        console.log("\n");
        return false;
      }
    }
    console.log("\n");
    console.log(
      `${colors.green}At ${new Date().toISOString()}, the blockchain is valid.${colors.reset}`
    );
    console.log("\n");
    return true;
  }
}

// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
class Transaction {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ —Å—É–º–º—É
    constructor(fromAddress, toAddress, amount) {
    this.fromAddress = fromAddress;
    this.toAddress = toAddress;
    this.amount = amount;
    this.timestamp = new Date().toUTCString();
  }

  // –°—á–∏—Ç–∞–µ–º —Ö–µ—à –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  computeHash() {
    return sha256(
      this.fromAddress + this.toAddress + this.amount + this.timestamp
    ).toString();
  }

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  sign(key) {
    this.signature = key.sign(this.computeHash(), "base64").toDER("hex");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  isValid() {
    if (this.fromAddress === null || this.fromAddress === "") {
      return true; // Mining reward is valid
    }

    if (!this.signature) {
      return false;
    }

    const key = ec.keyFromPublic(this.fromAddress, "hex");
    return key.verify(this.computeHash(), this.signature);
  }
}

// –ö–ª–∞—Å—Å —Ç–∞–π–º–µ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class MiningTimer {
  constructor() {
    this.csvPath = path.join(__dirname, 'mining_logs.csv'); 
    this.startTime = null;
    this.endTime = null;
    this.spentTime = null;
  }

  // Starts the timer
  start() {
    this.startTime = new Date();
  }

  // Stops the timer and calls the CSV log function
  stop(blockCount, minedHash) {
    this.endTime = new Date();
    this.spentTime = (this.endTime - this.startTime) / 1000;
    this.logToCSV(blockCount, minedHash);
  }

  // Logs mining data to a CSV file
  logToCSV(blockCount, minedHash) {
    const directory = path.dirname(this.csvPath);
    
    // Create the directory if it doesn't exist
    if (!fs.existsSync(directory)) {
      fs.mkdirSync(directory, { recursive: true });
    }

    const fileExists = fs.existsSync(this.csvPath);
    const headers = "Start Time (ISO),End Time (ISO),Spent Time (seconds),Block Count,Mined Hash\n";

    if (fileExists) {
      const data = fs.readFileSync(this.csvPath, "utf-8");
      const lines = data.split("\n");
      const firstLine = lines[0].trim();

      if (firstLine !== headers.trim()) {
        fs.writeFileSync(this.csvPath, headers + data);
      }
    }

    const logData = `${this.startTime.toISOString()},${this.endTime.toISOString()},${this.spentTime},${blockCount},${minedHash}\n`;

    if (!fileExists) {
      fs.writeFileSync(this.csvPath, headers + logData);
    } else {
      fs.appendFileSync(this.csvPath, logData);
    }
  }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ü–µ–ø–æ—á–∫–∏
const chain = new Chain();

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
const keyPairSender = ec.genKeyPair();
const privateKeySender = keyPairSender.getPrivate("hex");
const publicKeySender = keyPairSender.getPublic("hex");

const keyPairReceiver = ec.genKeyPair();
const privateKeyReceiver = keyPairReceiver.getPrivate("hex");
const publicKeyReceiver = keyPairReceiver.getPublic("hex");

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
const t1 = new Transaction(publicKeySender, publicKeyReceiver, 100);
t1.sign(keyPairSender);

console.log(`${colors.green}Transaction details:${colors.reset}`, t1);
console.log(
  `${colors.green}Is the transaction valid?${colors.reset}`,
  t1.isValid()
);

// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ø—É–ª –∏ –º–∞–π–Ω–∏–º –µ–µ
chain.addTransaction(t1);
chain.mineTransactionPool(publicKeyReceiver);

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –±–ª–æ–∫–µ
console.log(
  `${colors.cyan}Transactions in the latest block:${colors.reset}`,
  chain.chain[chain.chain.length - 1].transactions
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
const dbManager = new DatabaseManager("QuantumBlockChain_RU/mydatabase.db");

dbManager.initialize()
  .then(() => {
    return dbManager.createRecord("Hello blockchain database");
  })
  .then((id) => {
    console.log("Inserted record with ID:", id);
    return dbManager.readRecord(id);
  })
  .then((row) => {
    console.log("Read record:", row);
    return dbManager.updateRecord(row.id, "Updated data value");
  })
  .then((changes) => {
    console.log("Number of rows updated:", changes);
    // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
  })
  .then((changes) => {
    if (typeof changes !== "undefined") {
      console.log("Number of rows deleted:", changes);
    }
    dbManager.close();
  })
  .catch((error) => {
    console.error("Database error:", error);
  });

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
console.log(`\n${colors.bright}=== Testing Mining Difficulties ===${colors.reset}\n`);

//  –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
const testDifficulties = {
  1: 1,
  2: 1,
  3: 1,
  4: 1,
  5: 1
  // –î–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ >= 6 –º–∞–π–Ω–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–º
  // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —ç—Ç–æ —á–∞—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
};

function testMining(difficulty) {
  try {
    const startTime = Date.now();

    const testTransaction = new Transaction(publicKeySender, publicKeyReceiver, 100);
    testTransaction.sign(keyPairSender);

    const testChain = new Chain();
    testChain.difficulty = difficulty;
    testChain.addTransaction(testTransaction);

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏ –≤–æ –≤—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞
    const originalLog = console.log;
    console.log = () => {};

    testChain.mineTransactionPool(publicKeyReceiver);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console.log = originalLog;

    const endTime = Date.now();
    return endTime - startTime;
  } catch (error) {
    console.error(`${colors.red}Error testing difficulty ${difficulty}:${colors.reset}`, error);
    return null;
  }
}

console.log(`${colors.cyan}Difficulty | Time (ms) | Transactions/sec${colors.reset}`);
console.log(`${colors.cyan}-----------|-----------|-----------------${colors.reset}`);

for (const [difficulty, iterations] of Object.entries(testDifficulties)) {
  const timeElapsed = testMining(Number.parseInt(difficulty));

  if (timeElapsed !== null) {
    const transPerSec = (1000 / timeElapsed).toFixed(2);
    console.log(
      `${colors.yellow}${difficulty.padStart(10)}${colors.reset} | ` +
      `${colors.green}${timeElapsed.toString().padStart(9)}${colors.reset} | ` +
      `${colors.blue}${transPerSec.padStart(15)}${colors.reset}`
    );
  }
}