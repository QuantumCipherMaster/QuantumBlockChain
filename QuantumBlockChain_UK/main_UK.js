// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É elliptic –¥–ª—è ECDSA
const EC = require("elliptic").ec;
// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±‚Äô—î–∫—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –µ–ª—ñ–ø—Ç–∏—á–Ω–æ—é –∫—Ä–∏–≤–æ—é secp256k1
const ec = new EC("secp256k1");
// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó sha256
const sha256 = require("crypto-js/sha256");
// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const DatabaseManager = require("./db");
const fs = require('node:fs');
const path = require('node:path');

// –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m",
  red: "\x1b[31m"
};

// –ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –±–ª–æ–∫ —É –ª–∞–Ω—Ü—é–≥—É
class Block {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫—É –ø—Ä–∏–π–º–∞—î —Ö–µ—à –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–ª–æ–∫—É —Ç–∞ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
  constructor(previousHash, transactions) {
    this.timestamp = new Date().toISOString();
    this.previousHash = previousHash;
    this.transactions = transactions;
    this.hash = this.calculateHash();
    this.nonce = 1;
  }

  // –§—É–Ω–∫—Ü—ñ—è –æ–±—á–∏—Å–ª—é—î —Ö–µ—à –±–ª–æ–∫—É
  calculateHash() {
    return sha256(
      this.timestamp +
        this.previousHash +
        JSON.stringify(this.transactions) +
        this.nonce
    ).toString();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (difficulty)
  getAnswer(difficulty) {
    let answer = "";
    for (let i = 0; i < difficulty; i++) {
      answer += "0";
    }
    return answer;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É –±–ª–æ—Ü—ñ
  validateBlockTransactions() {
    for (const transaction of this.transactions) {
      if (!transaction.isValid()) {
        console.log(
          `${colors.red}Invalid transaction found in this block. The block is invalid.${colors.reset}`
        );
        return false;
      }
    }
    return true;
  }

  // –ü—Ä–æ—Ü–µ—Å –º–∞–π–Ω—ñ–Ω–≥—É –±–ª–æ–∫—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–∞–¥–∞–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  mine(difficulty) {
    this.validateBlockTransactions();
    const spinnerChars = ["üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò"];
    let spinnerIndex = 0;

    while (true) {
      this.hash = this.calculateHash();
      process.stdout.write(
        `\rMining ${spinnerChars[spinnerIndex]} nonce: ${
          this.nonce
        }, partial hash: ${this.hash.substring(0, 16)}...`
      );
      spinnerIndex = (spinnerIndex + 1) % spinnerChars.length;
      if (this.hash.substring(0, difficulty) !== this.getAnswer(difficulty)) {
        this.nonce++;
      } else {
        break;
      }
    }
    console.log(
      `\n${colors.green}Block mined successfully!: ${this.hash}${colors.reset}`
    );
  }
}

// –ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –±–ª–æ–∫—á–µ–π–Ω
class Chain {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–∞–Ω—Ü—é–≥, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å, –ø—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
  constructor() {
    this.chain = [this.createGenesisBlock()];
    this.difficulty = 4;
    this.transactionPool = [];
    this.minerReward = 3.125;
  }

  // –°—Ç–≤–æ—Ä—é—î –≥–µ–Ω–µ–∑–∏—Å-–±–ª–æ–∫ (–ø–µ—Ä—à–∏–π –±–ª–æ–∫ –ª–∞–Ω—Ü—é–≥–∞)
  createGenesisBlock() {
    return new Block("0", []);
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫ —É –ª–∞–Ω—Ü—é–≥—É
  getLatestBlock() {
    return this.chain[this.chain.length - 1];
  }

  // –î–æ–¥–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –ø—É–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
  addTransaction(transaction) {
    this.transactionPool.push(transaction);
  }

  // –°—Ç–≤–æ—Ä—é—î —Ç–∞ –¥–æ–¥–∞—î –Ω–æ–≤–∏–π –±–ª–æ–∫ —É –ª–∞–Ω—Ü—é–≥
  addBlock(newBlock) {
    const timer = new MiningTimer();
    newBlock.previousHash = this.getLatestBlock().hash;

    timer.start();
    newBlock.mine(this.difficulty);
    timer.stop(this.chain.length + 1, newBlock.hash);

    this.chain.push(newBlock);
  }

  // –ú–∞–π–Ω–∏—Ç—å —É—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –ø—É–ª—ñ —Ç–∞ —Ñ–æ—Ä–º—É—î –±–ª–æ–∫
  mineTransactionPool(minerAddress) {
    const timer = new MiningTimer();
    const rewardTransaction = new Transaction("", minerAddress, this.minerReward);
    this.transactionPool.push(rewardTransaction);

    timer.start();
    const newBlock = new Block(
      this.getLatestBlock().hash,
      this.transactionPool
    );
    newBlock.mine(this.difficulty);
    timer.stop(this.chain.length + 1, newBlock.hash);

    this.chain.push(newBlock);
    this.transactionPool = [];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –≤—Å—å–æ–≥–æ –ª–∞–Ω—Ü—é–≥–∞
  verification() {
    for (let i = 1; i < this.chain.length; i++) {
      const blockToValidate = this.chain[i];
      if (!blockToValidate.validateBlockTransactions()) {
        console.log(
          `${colors.red}An invalid block was found in the chain.${colors.reset}`
        );
        return false;
      }

      const currentBlock = this.chain[i];
      const previousBlock = this.chain[i - 1];

      if (currentBlock.hash !== currentBlock.calculateHash()) {
        console.log("\n");
        console.log(
          `${colors.red}At ${new Date().toISOString()}, the blockchain is invalid due to tampered data.${colors.reset}`
        );
        console.log("\n");
        return false;
      }

      if (currentBlock.previousHash !== previousBlock.hash) {
        console.log("\n");
        console.log(
          `${colors.red}At ${new Date().toISOString()}, the blockchain is invalid because the chain is broken.${colors.reset}`
        );
        console.log("\n");
        return false;
      }
    }
    console.log("\n");
    console.log(
      `${colors.green}At ${new Date().toISOString()}, the blockchain is valid.${colors.reset}`
    );
    console.log("\n");
    return true;
  }
}

// –ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
class Transaction {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø—Ä–∏–π–º–∞—î –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —ñ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞, –∞ —Ç–∞–∫–æ–∂ —Å—É–º—É
  constructor(fromAddress, toAddress, amount) {
    this.fromAddress = fromAddress;
    this.toAddress = toAddress;
    this.amount = amount;
    this.timestamp = new Date().toUTCString();
  }

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ö–µ—à –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  computeHash() {
    return sha256(
      this.fromAddress + this.toAddress + this.amount + this.timestamp
    ).toString();
  }

  // –ü—ñ–¥–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  sign(key) {
    this.signature = key.sign(this.computeHash(), "base64").toDER("hex");
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  isValid() {
    if (this.fromAddress === null || this.fromAddress === "") {
      return true; // Mining reward is valid
    }

    if (!this.signature) {
      return false;
    }

    const key = ec.keyFromPublic(this.fromAddress, "hex");
    return key.verify(this.computeHash(), this.signature);
  }
}

// –ö–ª–∞—Å —Ç–∞–π–º–µ—Ä–∞ –º–∞–π–Ω—ñ–Ω–≥—É –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
class MiningTimer {
  constructor() {
    this.csvPath = path.join(__dirname, 'mining_logs.csv'); 
    this.startTime = null;
    this.endTime = null;
    this.spentTime = null;
  }

  // Starts the timer
  start() {
    this.startTime = new Date();
  }

  // Stops the timer and calls the CSV log function
  stop(blockCount, minedHash) {
    this.endTime = new Date();
    this.spentTime = (this.endTime - this.startTime) / 1000;
    this.logToCSV(blockCount, minedHash);
  }

  // Logs mining data to a CSV file
  logToCSV(blockCount, minedHash) {
    const directory = path.dirname(this.csvPath);
    
    // Create the directory if it doesn't exist
    if (!fs.existsSync(directory)) {
      fs.mkdirSync(directory, { recursive: true });
    }

    const fileExists = fs.existsSync(this.csvPath);
    const headers = "Start Time (ISO),End Time (ISO),Spent Time (seconds),Block Count,Mined Hash\n";

    if (fileExists) {
      const data = fs.readFileSync(this.csvPath, "utf-8");
      const lines = data.split("\n");
      const firstLine = lines[0].trim();

      if (firstLine !== headers.trim()) {
        fs.writeFileSync(this.csvPath, headers + data);
      }
    }

    const logData = `${this.startTime.toISOString()},${this.endTime.toISOString()},${this.spentTime},${blockCount},${minedHash}\n`;

    if (!fileExists) {
      fs.writeFileSync(this.csvPath, headers + logData);
    } else {
      fs.appendFileSync(this.csvPath, logData);
    }
  }
}


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –ª–∞–Ω—Ü—é–≥–∞
const chain = new Chain();

// –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —Ç–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
const keyPairSender = ec.genKeyPair();
const privateKeySender = keyPairSender.getPrivate("hex");
const publicKeySender = keyPairSender.getPublic("hex");

const keyPairReceiver = ec.genKeyPair();
const privateKeyReceiver = keyPairReceiver.getPrivate("hex");
const publicKeyReceiver = keyPairReceiver.getPublic("hex");

// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é, –ø—ñ–¥–ø–∏—Å—É—î–º–æ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
const t1 = new Transaction(publicKeySender, publicKeyReceiver, 100);
t1.sign(keyPairSender);

console.log(`${colors.green}Transaction details:${colors.reset}`, t1);
console.log(
  `${colors.green}Is the transaction valid?${colors.reset}`,
  t1.isValid()
);

// –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –ø—É–ª —Ç–∞ –º–∞–π–Ω–∏–º–æ —ó—ó
chain.addTransaction(t1);
chain.mineTransactionPool(publicKeyReceiver);

// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –¥–æ–¥–∞–Ω–æ–º—É –±–ª–æ—Ü—ñ
console.log(
  `${colors.cyan}Transactions in the latest block:${colors.reset}`,
  chain.chain[chain.chain.length - 1].transactions
);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞ –ø—Ä–∞—Ü—é—î–º–æ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
const dbManager = new DatabaseManager("QuantumBlockChain_RU/mydatabase.db");

dbManager.initialize()
  .then(() => {
    return dbManager.createRecord("Hello blockchain database");
  })
  .then((id) => {
    console.log("Inserted record with ID:", id);
    return dbManager.readRecord(id);
  })
  .then((row) => {
    console.log("Read record:", row);
    return dbManager.updateRecord(row.id, "Updated data value");
  })
  .then((changes) => {
    console.log("Number of rows updated:", changes);
    // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
  })
  .then((changes) => {
    if (typeof changes !== "undefined") {
      console.log("Number of rows deleted:", changes);
    }
    dbManager.close();
  })
  .catch((error) => {
    console.error("Database error:", error);
  });
  
// –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä—ñ–≤–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –º–∞–π–Ω—ñ–Ω–≥—É
console.log(`\n${colors.bright}=== Testing Mining Difficulties ===${colors.reset}\n`);

// –î–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–∫–ª–∞–¥–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π–Ω—ñ–Ω–≥ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
const testDifficulties = {
  1: 10,
  2: 8,
  3: 6,
  4: 4,
  5: 4
  // –î–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ >= 6 –º–∞–π–Ω–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–º
  // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —ç—Ç–æ —á–∞—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
};

function testMining(difficulty) {
  try {
    const startTime = Date.now();

    const testTransaction = new Transaction(publicKeySender, publicKeyReceiver, 100);
    testTransaction.sign(keyPairSender);

    const testChain = new Chain();
    testChain.difficulty = difficulty;
    testChain.addTransaction(testTransaction);

    // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤–∏–≤—ñ–¥ –∫–æ–Ω—Å–æ–ª—ñ –ø—ñ–¥ —á–∞—Å –º–∞–π–Ω—ñ–Ω–≥—É
    const originalLog = console.log;
    console.log = () => {};

    testChain.mineTransactionPool(publicKeyReceiver);

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≤—ñ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log = originalLog;

    const endTime = Date.now();
    return endTime - startTime;
  } catch (error) {
    console.error(`${colors.red}Error testing difficulty ${difficulty}:${colors.reset}`, error);
    return null;
  }
}

console.log(`${colors.cyan}Difficulty | Time (ms) | Transactions/sec${colors.reset}`);
console.log(`${colors.cyan}-----------|-----------|-----------------${colors.reset}`);

for (const [difficulty, iterations] of Object.entries(testDifficulties)) {
  const timeElapsed = testMining(Number.parseInt(difficulty));

  if (timeElapsed !== null) {
    const transPerSec = (1000 / timeElapsed).toFixed(2);
    console.log(
      `${colors.yellow}${difficulty.padStart(10)}${colors.reset} | ` +
      `${colors.green}${timeElapsed.toString().padStart(9)}${colors.reset} | ` +
      `${colors.blue}${transPerSec.padStart(15)}${colors.reset}`
    );
  }
}